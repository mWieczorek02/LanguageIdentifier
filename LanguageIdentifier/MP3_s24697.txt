using LanguageIdentifier;
using Models;


const double learningRate = 0.5d;
var rng = new Random();

var trainLanguageContext = new LanguagesContext();
var testLanguageContext = new LanguagesContext();

trainLanguageContext.LoadLanguages(@"../../../Data");
testLanguageContext.LoadLanguages(@"../../../TestSet");

var trainSet = trainLanguageContext.getDataSet();
var testSet = testLanguageContext.getDataSet();
trainSet.Data = trainSet.Data.OrderBy(i => rng.Next()).ToList();

var perceptronLayer = trainLanguageContext.Languages.ToList()
    .Select(language => new Perceptron(trainSet, learningRate, language.Name)).ToList();


var perceptronTasks = new List<Task>();

perceptronLayer.ForEach(p =>
{
    Console.WriteLine("new task");
    var task = p.TrainUntil(1, trainSet, testSet);
    perceptronTasks.Add(task);
});

Task.WaitAll(perceptronTasks.ToArray());

while (true)
{
    Console.Write("input text: ");
    var text = Console.ReadLine();
    var predictions = new List<dynamic>();

    perceptronLayer.ForEach(p =>
    {
        var prediction = p.NormalizedNet(new Data
        {
            Vector = (new Text(text.ToLower(), null)).GetCharCountVector().Select(Convert.ToDouble).ToList()
        });

        Console.WriteLine($"{p.Classifier} accuracy: {prediction}");
        
        predictions.Add(new
        {
            Label = p.Classifier,
            Prediction = prediction
        });
    });

    var max = predictions.MaxBy(d => d.Prediction);
    Console.WriteLine($"{max.Label}");
}

namespace LanguageIdentifier;

using Interfaces;
using Models;

public class Perceptron : IPredictable
{
    public readonly string? Classifier;

    private double _threshold;
    private List<double> _weights;
    private readonly double _learningRate;

    public Perceptron(DataSet trainSet, double learningRate, string classifier)
    {
        Classifier = classifier;

        Console.WriteLine(Classifier);

        _learningRate = learningRate;

        var r = new Random();

        _threshold = r.NextDouble() * (1 - -1) + -1;
        _weights = Enumerable.Range(0, trainSet.VectorSize ?? 0).Select(_ => r.NextDouble() * (1 - -1) + -1).ToList();
        
        Console.WriteLine("\n");

        Train(trainSet);
    }

    public bool Predict(Data input)
    {
        var net = GetNet(input.Vector) + _threshold;
        return net >= 0;
    }

    public double NormalizedNet(Data input)
    {
        return Normalize(input.Vector).Zip(Normalize(_weights), (a, b) => a * b)
            .Aggregate(0d, (acc, val) => acc + val);
    }

    private void Train(DataSet trainSet) => trainSet.Data.ToList().ForEach(Train);

    public async Task TrainUntil(double accuracyTarget, DataSet trainSet, DataSet testSet)
    {
        await Task.Run(() =>
        {
            var rng = new Random();

            var max = new
            {
                Accuracy = 0d,
                Weights = new List<double>(),
                Treshold = 0d,
            };

            double accuracy = 0;
            var index = 0;

            while (accuracy < accuracyTarget)
            {
                if (index > 100) break;
                var correct = 0;
                trainSet.Data = trainSet.Data.OrderBy(i => rng.Next()).ToList();
                Train(trainSet);
                testSet.Data.OrderBy(i => rng.Next()).ToList().ForEach(d =>
                {
                    var isActive = NormalizedNet(d) >= 0;
                    var equalsToClassifier = Classifier == d.Label;
                    switch (isActive)
                    {
                        case true when equalsToClassifier:
                        case false when !equalsToClassifier:
                            correct++;
                            break;
                    }
                });
                accuracy = correct / (double)testSet.Data.Count;
                
                if (accuracy > max.Accuracy)
                {
                    max = new
                    {
                        Accuracy = accuracy,
                        Weights = _weights.ToList(),
                        Treshold = _threshold,
                    };
                }

                index++;
            }

            if (max.Accuracy is 0) return;
            _weights = max.Weights;
            _threshold = max.Treshold;
            
        });
    }

    private double GetNet(IEnumerable<double> vector) =>
        // net = X‚àòW-t
        vector.Zip(_weights, (a, b) => a * b).Aggregate(0d, (acc, val) => acc + val) - _threshold;


    private void Train(Data input)
    {
        var net = GetNet(input.Vector);
        var isActive = net >= 0 ? 1 : 0;
        var expected = input.Label == Classifier ? 1 : 0;


        //W‚Äô=W+(d-y)ùõºX
        _weights = _weights.Zip(input.Vector.Select(
                val => (expected - isActive) * _learningRate * val)
            , (a, b) => a + b).ToList();

        //t‚Äô=t-(d-y)ùõº
        _threshold -= (expected - isActive) * _learningRate;
    }

    private static IEnumerable<double> Normalize(List<double> data)
    {
        var vectorLength = Math.Sqrt(data.Aggregate(0d, ((i, d) => i + Math.Pow(d, 2))));

        return data.Select(d => d / vectorLength);
    }
}

using System.Text.RegularExpressions;
using Models;

namespace LanguageIdentifier;

public class LanguagesContext
{
    public readonly List<Language> Languages = new();
    private readonly Dictionary<string, DataSet> LanguageDataSets = new();

    public void LoadLanguages(string dataPath)
    {
        if (!Directory.Exists(dataPath)) throw new DirectoryNotFoundException("data folder doesnt exists");

        Directory.GetDirectories(dataPath).ToList().ForEach(directory =>
        {
            var languageName = Path.GetFileName(directory);

            var language = new Language
            {
                Name = languageName
            };
            Directory.GetFiles(directory, "*.txt").ToList().ForEach(file =>
            {
                language.Texts.Add(new Text(File.ReadAllText(file), languageName));
            });
            Languages.Add(language);
            LanguageDataSets[languageName] = getDataSet();
        });
    }

    public DataSet getDataSet()
    {
        return new DataSet
        {
            VectorSize = 'z' - 'a' + 1,
            Data = Languages
                .SelectMany(l => l.Texts)
                .OrderBy(d => Guid.NewGuid())
                .Select(t => new Data
                {
                    Vector = t.GetCharCountVector().Select(Convert.ToDouble).ToList(),
                    Label = t.Lang
                }).ToList()
        };
    }
}

using System.Text.RegularExpressions;

namespace Models;

public partial class Text
{
    private readonly string _rawText;
    public string? Lang { get; set; }
    private Dictionary<char, int> LetterDictionary { get; } = new();

    public Text(string text, string? lang)
    {
        _rawText = CleanUpText(text.ToLower());
        Lang = lang;
        GetLetterDictionary(_rawText);
    }

    public IEnumerable<double> GetCharCountVector() =>
        LetterDictionary.Values.ToList().Select(t => t / (double)_rawText.Length);

    private static string CleanUpText(string text) => ASCIIRegex().Replace(text, "");


    private void GetLetterDictionary(string text)
    {
        for (int i = 'a'; i <= 'z'; i++)
        {
            LetterDictionary.Add((char)i, 0);
        }

        var newDict = text.GroupBy(c => c).OrderBy(k => k.Key).ToDictionary(g => g.Key, g => g.Count());

        newDict.ToList().ForEach(t => LetterDictionary[t.Key] = t.Value);

    }

  GetLetterDictionary(text).Values.ToList();

    [GeneratedRegex("[^A-Za-z]+")]
    private static partial Regex ASCIIRegex();
}

namespace Models;

public class Language
{
    public string Name { get; set; }
    
    public List<Text> Texts { get; init; } = new();

    
}


namespace Models;

public class DataSet
{
    public int? VectorSize { get; set; }

    public List<Data> Data { get; set; } = new();

}

namespace Models;

public class Data
{
    public string? Label { get; init; }
    public List<double> Vector { get; init; } = new();
}


namespace Interfaces;

using Models;


public interface IPredictable
{
    public bool Predict(Data input);
}